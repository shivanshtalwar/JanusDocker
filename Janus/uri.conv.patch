commit 8b2b3a48f6ba93b4de51be5ab4dd65bf0d0e89f0
Author: ORiON <ORiON.1337@gmail.com>
Date:   Tue Mar 30 16:53:07 2021 +0300

    uri conversion.

diff --git a/plugins/janus_sip.c b/plugins/janus_sip.c
index a1c0d3c9..734f7234 100644
--- a/plugins/janus_sip.c
+++ b/plugins/janus_sip.c
@@ -635,6 +635,8 @@
 
 #include "plugin.h"
 
+#include <curl/curl.h>
+
 #include <arpa/inet.h>
 #include <net/if.h>
 
@@ -671,6 +673,99 @@
 #define JANUS_SIP_AUTHOR			"Meetecho s.r.l."
 #define JANUS_SIP_PACKAGE			"janus.plugin.sip"
 
+_Bool startsWith(const char *a, const char *b) {
+	if (strncmp(a, b, strlen(b)) == 0) {
+		return 1;
+	} else {
+		return 0;
+	}
+}
+typedef struct string_buffer_s {
+    char * ptr;
+    size_t len;
+} string_buffer_t;
+static char* concat(const char *s1, const char *s2) {
+    char *result = malloc(strlen(s1) + strlen(s2) + 1);
+    strcpy(result, s1);
+    strcat(result, s2);
+    return result;
+}
+static void string_buffer_initialize(string_buffer_t * sb) {
+    sb->len = 0;
+    sb->ptr = malloc(sb->len+1);
+    sb->ptr[0] = '\0';
+}
+static void string_buffer_finish(string_buffer_t * sb) {
+    free(sb->ptr);
+    sb->len = 0;
+    sb->ptr = NULL;
+}
+static size_t string_buffer_callback(void* buf, size_t size, size_t nmemb, void* data) {
+    string_buffer_t* sb = data;
+    size_t new_len = sb->len + size * nmemb;
+
+    sb->ptr = realloc(sb->ptr, new_len + 1);
+
+    memcpy(sb->ptr + sb->len, buf, size * nmemb);
+
+    sb->ptr[new_len] = '\0';
+    sb->len = new_len;
+
+    return size * nmemb;
+}
+static size_t write_callback(void* buf, size_t size, size_t nmemb, void* data ) {
+    return string_buffer_callback(buf, size, nmemb, data);
+}
+static char* convert_uri(const char* orig_uri) {
+	if (!startsWith(orig_uri, "encryptedUri-")) {
+		return orig_uri;
+	}
+
+	CURL* curl;
+	CURLcode res;
+	string_buffer_t strbuf;
+	char* uri;
+
+	JANUS_LOG(LOG_INFO, "uri before conversion: %s\n", orig_uri);
+	const char* base_url_endpoint = getenv("URI_CONV_ENDPOINT");
+	const char* url_endpoint = concat(base_url_endpoint, orig_uri);
+
+	string_buffer_initialize(&strbuf);
+
+	curl = curl_easy_init();
+
+	struct curl_slist* headers_list = NULL;
+
+	const char* auth_token = getenv("URI_CONV_AUTH_TOKEN");
+	const char* auth_header = concat("Authorization: Bearer ", auth_token);
+	headers_list = curl_slist_append(headers_list, auth_header);
+
+    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers_list);
+	curl_easy_setopt(curl, CURLOPT_URL, url_endpoint);
+	curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
+	curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
+	curl_easy_setopt(curl, CURLOPT_WRITEDATA, &strbuf);
+
+	res = curl_easy_perform(curl);
+
+	if(res != CURLE_OK) {
+		JANUS_LOG(LOG_ERR, "uri conversion failed. curl_easy_perform() err: %s\n", curl_easy_strerror(res));
+
+		curl_easy_cleanup(curl);
+		string_buffer_finish(&strbuf);
+
+		uri = "";
+		return uri;
+	}
+
+	uri = strbuf.ptr;
+	JANUS_LOG(LOG_INFO, "uri after conversion: %s\n", uri);
+
+	curl_easy_cleanup(curl);
+
+	return uri;
+}
+
 /* Plugin methods */
 janus_plugin *create(void);
 int janus_sip_init(janus_callbacks *callback, const char *config_path);
@@ -1506,6 +1601,7 @@ static json_t *janus_sip_get_incoming_headers(const sip_t *sip, const janus_sip_
 #define JANUS_SIP_ERROR_TOO_STRICT			452
 #define JANUS_SIP_ERROR_HELPER_ERROR		453
 #define JANUS_SIP_ERROR_NO_SUCH_CALLID		454
+#define JANUS_SIP_ERROR_URI_CONV			455
 
 
 /* Random string helper (for call-ids) */
@@ -3323,7 +3419,14 @@ static void *janus_sip_handler(void *data) {
 			json_t *aar = json_object_get(root, "autoaccept_reinvites");
 			session->media.autoaccept_reinvites = aar ? json_is_true(aar) : TRUE;
 			/* Parse address */
-			const char *uri_text = json_string_value(uri);
+			const char* uri_text = convert_uri(json_string_value(uri));
+			if (uri_text == "") {
+				JANUS_LOG(LOG_ERR, "Invalid user address %s\n", uri_text);
+				error_code = JANUS_SIP_ERROR_URI_CONV;
+				g_snprintf(error_cause, 512, "Failed to convert uri");
+				goto error;
+			}
+
 			janus_sip_uri_t target_uri;
 			if(janus_sip_parse_uri(&target_uri, uri_text) < 0) {
 				JANUS_LOG(LOG_ERR, "Invalid user address %s\n", uri_text);
@@ -5499,7 +5602,7 @@ void janus_sip_sofia_callback(nua_event_t event, int status, char const *phrase,
 			json_object_set_new(call, "sip", json_string("event"));
 			json_t *calling = json_object();
 			json_object_set_new(calling, "event", json_string(in_progress ? "progress" : "accepted"));
-			json_object_set_new(calling, "username", json_string(session->callee));
+			/*json_object_set_new(calling, "username", json_string(session->callee));*/
 			if(is_focus)
 				json_object_set_new(calling, "isfocus", json_true());
 			if(session->incoming_header_prefixes) {
